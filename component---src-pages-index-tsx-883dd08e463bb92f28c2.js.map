{"version":3,"file":"component---src-pages-index-tsx-883dd08e463bb92f28c2.js","mappings":"yLAgCA,EA7Be,SAAC,GAAD,QAAGA,UAAAA,OAAH,MAAe,GAAf,SACb,0BACEC,MAAO,CACLC,WAAW,gBACXC,aAAa,YAGf,uBACEF,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,sBAGV,sBAAIL,MAAO,CAAEG,OAAQ,IACnB,gBAAC,EAAAG,KAAD,CACEC,GAAG,IACHP,MAAO,CACLQ,MAAM,QACNC,eAAe,SAGhBV,O,UCNX,IAqCA,EArC6C,SAAC,GAAyB,IAAvBW,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/CC,GAAUC,EAAAA,EAAAA,KACVC,EAAgBF,EAAQG,MAAK,SAAAC,GAAC,OAAIA,EAAEC,WAC1C,OACE,gCACE,gBAAC,EAAD,CAAQlB,UAAWW,IACnB,uBACEV,MAAO,CACLG,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,4BAAOM,GACNG,GACC,0BACEd,MAAO,CACLkB,UAAU,SAGZ,0BACEC,aAAcL,EAAcM,GAC5BC,SAAU,SAAAC,GAAC,OAAIC,EAAAA,EAAAA,UAAS,MAAQD,EAAEE,OAAOC,SAExCb,EAAQc,KAAI,SAAAC,GAAM,OACjB,0BAAQC,IAAKD,EAAOP,GAAIK,MAAOE,EAAOP,IA7BtD,SAAuBO,GACrB,OAAUA,EAAOP,GAAjB,MAAyBO,EAAOE,KAAKC,YA6BpBC,CAAcJ,a,6ECvBlB,SAASd,IACtB,IAAQmB,GAAYC,EAAAA,EAAAA,gBAAe,cAA3BD,QAsBAE,GAAaC,EAAAA,EAAAA,eAAbD,SAER,OAAOF,EAAQI,MAAMV,KAAI,gBAAGW,EAAH,EAAGA,KAAH,MAA+B,CACtDpB,QAAS,IAAIqB,OAAJ,KAAgBD,EAAKE,MAAQC,KAAKN,GAC3Cd,GAAIiB,EAAKE,KACTV,KAAMQ,EAAKI,oB,wECdf,UA9BkB,WAChB,IAAM7B,GAAUC,EAAAA,EAAAA,KAkBhB,OAhBA6B,EAAAA,WAAgB,WACd,IAAMC,EAAkBC,OAAOC,UAAUC,SACrCC,EAAiBnC,EAAQG,MAC3B,SAAAC,GAAC,OAAIA,EAAEI,GAAG4B,QAAQ,IAAK,OAASL,KAE7BI,IACHA,EAAiBnC,EAAQG,MACvB,SAAAC,GAAC,OAAIA,EAAEI,KAAOuB,EAAgBK,QAAQ,YAAa,QAGnDD,IACFE,QAAQC,IAAI,CAAEtC,QAAAA,EAAS+B,gBAAAA,EAAiBI,eAAAA,KACxCxB,EAAAA,EAAAA,UAAS,IAAIwB,EAAe3B,GAApB,QAET,IAGD,gBAAC,IAAD,KACGR,EAAQc,KAAI,gBAAGN,EAAH,EAAGA,GAAIS,EAAP,EAAOA,KAAP,OACX,qBAAGD,IAAKR,GACN,gBAAC,EAAAd,KAAD,CAAMC,GAAE,IAAMa,EAAN,KAAcS,EAAKsB","sources":["webpack://tenk-template-gatsby/./src/components/header.tsx","webpack://tenk-template-gatsby/./src/components/layout.tsx","webpack://tenk-template-gatsby/./src/hooks/useLocales.ts","webpack://tenk-template-gatsby/./src/pages/index.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Header = ({ siteTitle = \"\" }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { navigate } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\nimport useLocales from \"../hooks/useLocales\"\nimport type { Locale } from \"../hooks/useLocales\"\n\nfunction presentLocale(locale: Locale): string {\n  return `${locale.id} - ${locale.i18n.lang_picker}`\n}\n\nconst Layout: React.FC<{ title?: string }> = ({ title, children }) => {\n  const locales = useLocales()\n  const currentLocale = locales.find(l => l.current)\n  return (\n    <>\n      <Header siteTitle={title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        {currentLocale && (\n          <footer\n            style={{\n              marginTop: `2rem`,\n            }}\n          >\n            <select\n              defaultValue={currentLocale.id}\n              onChange={e => navigate(\"../\" + e.target.value)}\n            >\n              {locales.map(locale => (\n                <option key={locale.id} value={locale.id}>\n                  {presentLocale(locale)}\n                </option>\n              ))}\n            </select>\n          </footer>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","import { useStaticQuery, graphql } from \"gatsby\"\nimport { useLocation } from \"@reach/router\"\nimport type { I18nFields, Locale as RawLocale } from \"../../lib/locales\"\n\n// TODO: look into for automatic TS typing for GraphQL queries\n// https://www.gatsbyjs.com/plugins/gatsby-typescript/\ninterface Node {\n  name: string\n  childI18NJson: I18nFields\n}\n\nexport type Locale = RawLocale & {\n  current: boolean\n}\n\n/**\n * Gatsby really wants to push everything, even simple stuff like JSON files in\n * a project folder, through a complicated GraphQL pipeline. This hook hides the\n * details of looking up the locale files in the `i18n` folder and makes them\n * easily accessible to any component that needs them. It also adds a `current`\n * field for the current locale based on the current route.\n */\nexport default function useLocales(): Locale[] {\n  const { allFile } = useStaticQuery(\n    graphql`\n      query {\n        allFile {\n          edges {\n            node {\n              name\n              childI18NJson {\n                view_in\n                lang_picker\n                title\n                description\n                hero_title\n                hero_body\n                hero_cta\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n  const { pathname } = useLocation()\n\n  return allFile.edges.map(({ node }: { node: Node }) => ({\n    current: new RegExp(`^/${node.name}`).test(pathname),\n    id: node.name,\n    i18n: node.childI18NJson,\n  }))\n}\n","import * as React from \"react\"\nimport { Link, navigate } from \"gatsby\"\n\nimport useLocales from \"../hooks/useLocales\"\nimport Layout from \"../components/layout\"\n\nconst IndexPage = () => {\n  const locales = useLocales()\n\n  React.useEffect(() => {\n    const preferredLocale = window.navigator.language\n    let matchingLocale = locales.find(\n      l => l.id.replace(\"_\", \"-\") === preferredLocale\n    )\n    if (!matchingLocale)\n      matchingLocale = locales.find(\n        l => l.id === preferredLocale.replace(/-[A-Z]{2}/, \"\")\n      )\n\n    if (matchingLocale) {\n      console.log({ locales, preferredLocale, matchingLocale })\n      navigate(`/${matchingLocale.id}/`)\n    }\n  }, [])\n\n  return (\n    <Layout>\n      {locales.map(({ id, i18n }) => (\n        <p key={id}>\n          <Link to={`/${id}/`}>{i18n.view_in}</Link>\n        </p>\n      ))}\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"],"names":["siteTitle","style","background","marginBottom","margin","maxWidth","padding","Link","to","color","textDecoration","title","children","locales","useLocales","currentLocale","find","l","current","marginTop","defaultValue","id","onChange","e","navigate","target","value","map","locale","key","i18n","lang_picker","presentLocale","allFile","useStaticQuery","pathname","useLocation","edges","node","RegExp","name","test","childI18NJson","React","preferredLocale","window","navigator","language","matchingLocale","replace","console","log","view_in"],"sourceRoot":""}